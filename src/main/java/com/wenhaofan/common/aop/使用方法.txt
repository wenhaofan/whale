    自 jfinal 3.3 开放 configConstant(Constants me) 中的 me.setControllerFactory(...) 以来，
仍然还不断有同学在问 jfinal 是否支持依赖注入问题，证明很少有人意识到开放 setControllerFactory(...)
的主要目的。

   所以 jfinal 3.5 计划出手为同学们写一个极简的自动化注入、自动化业务层 AOP 的实现， 
AopController、Inject 为 jfinal 3.5 新增功能，俱乐部的同学们优先享用，使用方法如下：


--------------------------------------------------------------------------
AopControllerFactory、@Inject 使用文档：

AopControllerFactory 用于注入依赖对象并更好支持 AOP，其优点如下：
1：使用 @Inject 自动化注入并 enhance 对象，免去业务层 AOP 必须手动 enhance 的步骤

2：免去业务层维护单例的样板式代码，例如下面代码可以删掉了：
   public static final MyService me = new MyService();



基本用法如下：
1：配置
   me.setControllerFactory(new AopControllerFactory());
   
2：Controller 中注入业务层，也可以注入任何其它类，不一定非得是 Service
   public class MyController extends Controller {
   
      @Inject
      MyService service;
      
      public void index() {
         render(service.doIt());
      }
   }
   
3：Service 注入另一个 Service，也可以注入任何其它类，不一定非得是 Service
   public class MyService {
   
      @Inject
      OtherService other;		// OtherService 内部还可以继续接着注入
      
      public void doIt() {
         other.doOther();
      }
   }

如上代码所示，在使用时，只需要在被注入的对象上使用 @Inject 即可，代码量极少，学习成本极低


高级用法：
1：@Inject 注解默认注入属性自身类型的对象，可以通过如下代码指定被注入的类型：
   @Inject(UserServiceImpl.class)			// 此处的 UserServiceImpl 为 UserService 的子类或实现类
   UserService userService;

2：被注入对象默认会被 enhance 增强，可以通过 AopControllerFactory.setEnhance(false) 配置默认不增强

3：被注入对象默认是 singleton 单例，可以通过 AopControllerFactory.setSingleton(false) 配置默认不为单例

4：可以在 @Inject 注解中直接配置 enhance 增强与 singleton 单例：
   @Inject(enhance=YesOrNo.NO, singleton=YesOrNo.YES)
   注意：如上在 @Inject 直接配置会覆盖掉 2、3 中 setEnhance()/setSingleton() 方法配置的默认值

5：如上 2、3、4 中的配置，建议的用法是：先用 setEnhance()/setSingleton() 配置大多数情况，然后在个别
   违反上述配置的情况下在 @Inject 中直接 enhance、singleton 来覆盖默认配置，这样可以节省大量代码





